// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MongoTreeBuilder examples query 2 should build queries with dot-notation 1`] = `
"condition [?] {
  type: scoped
  trace: TRACE: ?
  alias: __root__
  column: null
  scope: 1
  condition [0] {
    type: primitive
    trace: TRACE: ? > id > $eq
    alias: __root__
    column: id
    operator: 1
    operand: 2
  }
  condition [1] {
    type: scoped
    trace: TRACE: ? > author > $and
    alias: __root___author
    column: author
    scope: 1
    condition [0] {
      type: primitive
      trace: TRACE: ? > author > $and > id > $eq
      alias: __root___author
      column: id
      operator: 1
      operand: 1
    }
    condition [1] {
      type: primitive
      trace: TRACE: ? > author > $and > name > $eq
      alias: __root___author
      column: name
      operator: 1
      operand: Lewis Carroll
    }
    condition [2] {
      type: scoped
      trace: TRACE: ? > author > $and > comments > $and
      alias: __root___author_comments
      column: comments
      scope: 1
      condition [0] {
        type: primitive
        trace: TRACE: ? > author > $and > comments > $and > id > $in
        alias: __root___author_comments
        column: id
        operator: 9
        operand: 1,2
      }
    }
  }
}"
`;

exports[`MongoTreeBuilder print should print a query 1`] = `
"condition [?] {
  type: scoped
  trace: TRACE: ?
  alias: __root__
  column: null
  scope: 1
  condition [0] {
    type: scoped
    trace: TRACE: ? > $and
    alias: __root__
    column: null
    scope: 1
    condition [0] {
      type: scoped
      trace: TRACE: ? > $and > $and
      alias: __root__
      column: null
      scope: 1
      condition [0] {
        type: primitive
        trace: TRACE: ? > $and > $and > field > $eq
        alias: __root__
        column: field
        operator: 1
        operand: 1
      }
    }
    condition [1] {
      type: scoped
      trace: TRACE: ? > $and > $and
      alias: __root__
      column: null
      scope: 1
      condition [0] {
        type: primitive
        trace: TRACE: ? > $and > $and > field2 > $eq
        alias: __root__
        column: field2
        operator: 1
        operand: 2
      }
      condition [1] {
        type: scoped
        trace: TRACE: ? > $and > $and > field3 > $and
        alias: __root___field3
        column: field3
        scope: 1
        condition [0] {
          type: primitive
          trace: TRACE: ? > $and > $and > field3 > $and > id > $eq
          alias: __root___field3
          column: id
          operator: 1
          operand: 3
        }
      }
    }
  }
}"
`;
